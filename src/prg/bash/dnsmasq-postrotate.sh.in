#! /usr/bin/env bash
#########################################################################
#									#
#	dnsmasq-postrotate.sh is automatically generated,		#
#		please do not modify!					#
#									#
#########################################################################

#########################################################################
#									#
# Script ID: dnsmasq-postrotate.sh					#
# Author: Copyright (C) 2018  Mark Grant				#
#									#
# Released under the GPLv3 only.					#
# SPDX-License-Identifier: GPL-3.0					#
#									#
# Purpose:								#
# To ask the daemon to re-open it's log file which is necessary after	#
# rotating the logs. Also request the daemon to write summary stats to	#
# the syslog.								#
#									#
# Syntax:	dnsmasq-postrotate.sh [ -h --help || -v --verbose	#
#					|| -V --version ]		#
#									#
# Exit Codes:	0 - success						#
#		1 - failure						#
#									#
# Further Info:								#
#									#
#########################################################################

#########################################################################
#									#
# Changelog								#
#									#
# Date		Author	Version	Description				#
#									#
# 25/05/2018	MG	1.0.1	First release.				#
# 29/05/2018	MG	1.0.2	Make script run silently by default	#
#				when error-free. Add verbose option.	#
#				Log any output to syslog.		#
# 28/07/2018	MG	1.0.3	If the daemon is not running it cannot	#
#				be construed as an error, so terminate	#
#				normally.				#
#				Make find more robust - do not descend	#
#				into non-readable directories. Do not	#
#				descend into directories on other	#
#				(mounted) filesystems. (e.g. avoids	#
#				gvfs).					#
#				Use AutoConf runstatedir substitution	#
#				variable instead of hard-coded /var/run	#
# 10/12/2018	MG	1.0.4	Refactor help output into a function.	#
#				Do not hard code outputprefix contents.	#
#				Make verbose a 'true' boolean.		#
#				Make relevant script-wide variables	#
#				readonly.				#
#				Refactor CL processing into a function.	#
#									#
#########################################################################

#########################
# Script-wide variables #
#########################
script_exit_code=0
readonly outputprefix="$(basename $0): "
readonly version="1.0.4"			# script version
readonly packageversion=@pkgversion@		# package version

verbose=false


#############
# Functions #
#############

# -h --help output.
usage ()
{
cat << EOF
Usage is $0 [options]
	-h or --help displays usage information
	OR
	-v or --verbose verbose output
	OR
	-V or --version displays version information
EOF
}

# Output $1 to stdout or stderr depending on $2.
output()
{
	if [ $2 = 0 ]; then
		echo "$outputprefix$1"
	else
		echo "$outputprefix$1" 1>&2
	fi
	logger "$outputprefix$1"
	std_cmd_err_handler $?
}

# Standard function to test command error ($1 is $?) and exit if non-zero
std_cmd_err_handler()
{
	if [ $1 != 0 ]; then
		script_exit_code=$1
		script_exit
	fi
}

# Standard function to tidy up and return exit code
script_exit()
{
	exit $script_exit_code
}

# Standard trap exit function
trap_exit()
{
script_exit_code=1
output "Script terminating due to trap received." 1
script_exit
}

# Setup trap
trap trap_exit SIGHUP SIGINT SIGTERM

# Process command line arguments with GNU getopt.
# Parameter - command line
# No return value
proc_CL()
{
	local GETOPTTEMP

	GETOPTTEMP=`getopt -o hvV --long help,verbose,version -n "$0" -- "$@"`
	std_cmd_err_handler $?

	eval set -- "$GETOPTTEMP"
	std_cmd_err_handler $?

	while true; do
		case "$1" in
		-h|--help)
			usage
			shift
			script_exit_code=0
			script_exit
			;;
		-v|--verbose)
			verbose=true
			shift
			;;
		-V|--version)
			echo "$0 Script version "$version
			echo "$0 Package version "$packageversion
			shift
			script_exit_code=0
			script_exit
			;;
		--)	shift
			break
			;;
		*)	script_exit_code=1
			output "Internal error." 1
			script_exit
			;;
		esac
	done

	# Script does not accept other arguments.
	if [ $# -gt 0 ]; then
		script_exit_code=1
		output "Invalid argument." 1
		script_exit
	fi
}


########
# Main #
########

proc_CL $@

# Establish if the daemon is running.
# The xdev means do not descend into directories on other (mounted) filesystems.
# (Which avoids problems on, for example, gvfs).
# The prune and not readable means do not descend into non-readable directories.
cmd="find @runstatedir@/ -xdev ! -readable -prune -o -name dnsmasq.pid -print"
pidfile=$($cmd)
std_cmd_err_handler $?

if [[ "$pidfile" == "" || ! -f $pidfile ]]; then
	script_exit_code=0
	if $verbose; then
		output "dnsmasq daemon not running." 0
	fi
	script_exit
fi

# Request the daemon to write summary stats to the syslog.
kill -s SIGUSR1 $(cat $pidfile)
std_cmd_err_handler $?

if $verbose; then
	output "Daemon requested to log summary stats." 0
fi

# Request the daemon to close and re-open it's log file.
kill -s SIGUSR2 $(cat $pidfile)
std_cmd_err_handler $?

if $verbose; then
	output "Daemon requested to close and re-open it's log file." 0
fi

script_exit_code=0
script_exit

